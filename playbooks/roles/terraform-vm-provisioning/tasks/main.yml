---
# tasks file for terraform-provisioning
- name: Git checkout
  ansible.builtin.git:
    repo: "{{ git_repo_url }}"
    dest: /tmp/terraform
    version: main

- name: Decrypt terraform states files
  ansible.builtin.expect:
    command: 'ansible-vault decrypt terraform.tfstate terraform.tfstate.backup terraform.tfvars'
    chdir: "{{ git_work_dir }}"
    responses:
      password: "{{ pah_pass }}"

- name: Provision or deprovision the infra with Terraform
  cloud.terraform.terraform:
    project_path: "{{ git_work_dir }}"
    # For a destroy we need this to be absent and false
    state: "{{ infra_state }}"
    force_init: "{{ force_init }}"
    variables:
      webserver_count: "{{ server_count }}"
      instance_name_lb: "{{ prefix_instance_name }}_lb"
      instance_name_webserver: "{{ prefix_instance_name }}_web"
      instance_env: "{{ instance_env }}"
      project_name: "{{ project_name }}"
  register: terraformInfra

- name: Encrypt terraform states files
  ansible.builtin.expect:
    command: 'ansible-vault encrypt terraform.tfstate terraform.tfstate.backup terraform.tfvars'
    chdir: "{{ git_work_dir }}"
    responses:
      password: "{{ pah_pass }}"

- name: Update git repo with terraform files
  ansible.builtin.shell: git remote set-url origin {{ git_repo_url }} && git add -A && git commit -m "Synching new files to repo" && git push
  args:
    chdir: "{{ git_work_dir }}"
  environment:
    GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
    GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
    GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
    GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
